<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:ui="clr-namespace:Start9.UI.Wpf;assembly=Start9.UI.Wpf"
            xmlns:bread="clr-namespace:Start9.UI.Wpf.Breadcrumbs;assembly=Start9.UI.Wpf"
            xmlns:conv="clr-namespace:Start9.UI.Wpf.Converters;assembly=Start9.UI.Wpf"
            xmlns:win="clr-namespace:Start9.UI.Wpf.Windows;assembly=Start9.UI.Wpf"
            xmlns:uib="clr-namespace:Start9.UI.Wpf.Behaviors;assembly=Start9.UI.Wpf"
            xmlns:beh="http://schemas.microsoft.com/expression/2010/interactivity">
    <conv:CornerCurvesToCornerRadiusConverter x:Key="CornerCurvesToCornerRadiusConverter"/>
    <conv:ListViewItemIndexToBoolConverter x:Key="ListViewItemIndexToBoolConverter"/>
    
    <Style x:Key="{x:Type ui:BreadcrumbsBar}" TargetType="{x:Type ui:BreadcrumbsBar}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:BreadcrumbsBar}">
                    <ControlTemplate.Resources>
                        <ResourceDictionary>
                            <ResourceDictionary.MergedDictionaries>
                                <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Shale;component/Themes/Controls/Button.xaml"/>
                            </ResourceDictionary.MergedDictionaries>
                            <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                <Setter Property="ui:AttachedProperties.CornerCurves">
                                    <Setter.Value>
                                        <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Value="True">
                                        <DataTrigger.Binding>
                                            <MultiBinding Converter="{StaticResource ListViewItemIndexToBoolConverter}" ConverterParameter="first" FallbackValue="False">
                                                <MultiBinding.Bindings>
                                                    <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                                                    <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type StackPanel}}" FallbackValue="{x:Null}"/>
                                                    <Binding Mode="OneWay" Path="Children.Count" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type StackPanel}}" FallbackValue="0" UpdateSourceTrigger="PropertyChanged"/>
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </DataTrigger.Binding>
                                        <!--Setter TargetName="IdleBackground" Property="stc" Value="2,0,0,2"/>
                                    <Setter TargetName="IdleBackground" Property="BorderThickness" Value="1"/-->
                                        <Setter Property="ui:AttachedProperties.CornerCurves">
                                            <Setter.Value>
                                                <ui:CornerCurves TopLeft="True" TopRight="False" BottomRight="False" BottomLeft="True"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>

                            <!--Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid UseLayoutRounding="True" SnapsToDevicePixels="True">
                                            <Border x:Name="IdleBackground" BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="0,1,1,1" CornerRadius="0">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarActiveGradientStops}"/>
                                                </Border.Background>
                                            </Border>
                                            <Border x:Name="HoverBackground" BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="{Binding BorderThickness, ElementName=IdleBackground}" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Opacity="0">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarInactiveGradientStops}"/>
                                                </Border.Background>
                                            </Border>
                                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                    <Condition Property="IsPressed" Value="False"/>
                                                </MultiTrigger.Conditions>
                                                <MultiTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </MultiTrigger.EnterActions>
                                                <MultiTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </MultiTrigger.ExitActions>
                                            </MultiTrigger>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource ListViewItemIndexToBoolConverter}" ConverterParameter="first" FallbackValue="False">
                                                        <MultiBinding.Bindings>
                                                            <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                                                            <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type StackPanel}}" FallbackValue="{x:Null}"/>
                                                            <Binding Mode="OneWay" Path="Children.Count" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type StackPanel}}" FallbackValue="0" UpdateSourceTrigger="PropertyChanged"/>
                                                        </MultiBinding.Bindings>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter TargetName="IdleBackground" Property="CornerRadius" Value="2,0,0,2"/>
                                                <Setter TargetName="IdleBackground" Property="BorderThickness" Value="1"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style-->
                        </ResourceDictionary>
                    </ControlTemplate.Resources>
                    <Grid>
                        <TextBox x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <StackPanel x:Name="PART_BreadcrumbsStackPanel" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Stretch"/>
                        <!--Height="{Binding ActualHeight, ElementName=PART_TextBox}"-->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type bread:BreadcrumbsBar}" TargetType="{x:Type bread:BreadcrumbsBar}">
        <Setter Property="Height" Value="28"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type bread:BreadcrumbsBar}">
                    <Grid>
                        <Button x:Name="PART_BackgroundButton" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Content="{Binding Path=(ui:AttachedProperties.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}">
                                    <Setter Property="Padding" Value="6,0"/>
                                    <Setter Property="ui:AttachedProperties.CornerCurves" Value="{Binding (ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Button}">
                                                <Grid>
                                                    <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TextBoxIdleBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1"  GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TextBoxIdleBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                    </Border>
                                                    <ContentPresenter x:Name="PART_ContentHost" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type bread:BreadcrumbsBar}}}" Value="True">
                                                        <DataTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </DataTrigger.EnterActions>
                                                        <DataTrigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </DataTrigger.ExitActions>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type bread:BreadcrumbsBar}}}" Value="False">
                                                        <DataTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PART_ContentHost" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </DataTrigger.EnterActions>
                                                        <DataTrigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PART_ContentHost" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </DataTrigger.ExitActions>
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Style>
                        </Button>
                        <Border x:Name="PressedBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0" IsHitTestVisible="False">
                            <Border CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="0" Padding="0" Background="Transparent" BorderThickness="1">
                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                </Border.BorderBrush>
                            </Border>
                        </Border>
                        <TextBox x:Name="PART_TextBox" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" IsHitTestVisible="False">
                            <TextBox.Template>
                                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                    <Grid Background="#01000000">
                                        <ScrollViewer Margin="0" Padding="{TemplateBinding Padding}" x:Name="PART_ContentHost" VerticalAlignment="Center"/>
                                    </Grid>
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <StackPanel x:Name="PART_BreadcrumbsStackPanel" Margin="28,0,0,0" IsItemsHost="True" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Stretch"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ui:AttachedProperties.Icon" Value="{x:Null}">
                            <Setter TargetName="PART_BreadcrumbsStackPanel" Property="Margin" Value="0"/>
                        </Trigger>
                        <Trigger Property="ShowsPath" Value="True">
                            <Setter TargetName="PART_BackgroundButton" Property="IsHitTestVisible" Value="False"/>
                            <Setter TargetName="PART_BreadcrumbsStackPanel" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_TextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_TextBox" Property="IsHitTestVisible" Value="True"/>
                            <!--Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}"/-->
                        </Trigger>
                        <Trigger SourceName="PART_TextBox" Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type bread:Breadcrumb}" TargetType="{x:Type bread:Breadcrumb}">
        <Setter Property="Padding" Value="10,0,0,0"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <!--Setter Property="HeaderTemplate" Value="{Binding HeaderTemplate, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type bread:BreadcrumbsBar}}}"/-->
        <Setter Property="ui:AttachedProperties.CornerCurves" Value="false"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type bread:Breadcrumb}">
                    <Grid Background="#01000000">
                        <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                        </Border>
                        <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                        </Border>
                        <Border CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"/>
                        <Border x:Name="PressedBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,0,0;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,0,0;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                        </Border>
                        <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                            <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                        </Border>
                        <DockPanel DockPanel.Dock="Top" Margin="{TemplateBinding Padding}">
                            <ToggleButton x:Name="PART_ShowSubItemsToggleButton" DockPanel.Dock="Right" Margin="4,0,0,0">
                                <!--Open, Source={x:Reference ItemsPopup}-->
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton">
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="BorderBrush" Value="Transparent" />
                                        <Setter Property="Foreground" Value="{Binding Foreground,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type bread:Breadcrumb}}}"/>
                                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Margin" Value="0"/>
                                        <Setter Property="Width" Value="30"/>
                                        <Setter Property="Height" Value="28"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="ToggleButton">
                                                    <Grid Background="#01000000" Effect="{DynamicResource DropShadow}" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True">
                                                        <!--ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="8,0"-->
                                                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 0 12" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                                                            <!--Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}"-->
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="0"/>
                                                            </Path.RenderTransform>
                                                        </Path>
                                                        <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,0,1,0" Effect="{DynamicResource DropShadow}" RenderTransformOrigin="0.5,0.5"/>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                                                        </Trigger>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Trigger.EnterActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="90" Duration="0:0:0.125"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </Trigger.EnterActions>
                                                            <Trigger.ExitActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </Trigger.ExitActions>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <!--Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}"-->
                            <!--HeaderedContentControl x:Name="PART_HeaderControl" Header="{TemplateBinding Header}" HeaderTemplate="{TemplateBinding HeaderTemplate}"/-->
                        </DockPanel>
                        <Popup x:Name="ItemsPopup" IsOpen="{Binding IsChecked, Source={x:Reference PART_ShowSubItemsToggleButton}, FallbackValue=False}" StaysOpen="False" AllowsTransparency="True">
                            <Grid Margin="4,0,4,7" Background="#01000000" MinWidth="{TemplateBinding ActualWidth}" UseLayoutRounding="True" Effect="{DynamicResource DropShadow}">
                                <Border x:Name="DropDownBorder" CornerRadius="0,0,3,3" Background="{TemplateBinding Background}"><!--Background="Red"-->
                                    <ScrollViewer x:Name="PART_ScrollViewer" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" uib:ScrollAnimationBehavior.IsEnabled="{TemplateBinding uib:ScrollAnimationBehavior.IsEnabled}" uib:ScrollAnimationBehavior.TimeDuration="{TemplateBinding uib:ScrollAnimationBehavior.TimeDuration}" uib:ScrollAnimationBehavior.EasingFunction="{TemplateBinding uib:ScrollAnimationBehavior.EasingFunction}" ui:AttachedProperties.CornerCurves="false,false,true,true">
                                        <StackPanel x:Name="PART_ItemsHost" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger SourceName="ItemsPopup" Property="IsOpen" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter TargetName="PART_ShowSubItemsToggleButton" Property="IsHitTestVisible" Value="False"/>
                            <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_ItemsHost}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource ListViewItemIndexToBoolConverter}" ConverterParameter="first" FallbackValue="False">
                                            <MultiBinding.Bindings>
                                                <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                                                <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type StackPanel}}" FallbackValue="{x:Null}"/>
                                                <Binding Mode="OneWay" Path="Children.Count" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type StackPanel}}" FallbackValue="0" UpdateSourceTrigger="PropertyChanged"/>
                                            </MultiBinding.Bindings>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Binding="{Binding (ui:AttachedProperties.Icon), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type bread:BreadcrumbsBar}}}" Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <!--Setter TargetName="IdleBackground" Property="stc" Value="2,0,0,2"/>
                            <Setter TargetName="IdleBackground" Property="BorderThickness" Value="1"/-->
                            <Setter Property="ui:AttachedProperties.CornerCurves">
                                <Setter.Value>
                                    <ui:CornerCurves TopLeft="{Binding (ui:AttachedProperties.CornerCurves).TopLeft, RelativeSource={RelativeSource Mode=TemplatedParent}}" TopRight="False" BottomRight="False" BottomLeft="{Binding (ui:AttachedProperties.CornerCurves).BottomLeft, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>