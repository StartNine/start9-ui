<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:conv="clr-namespace:Start9.UI.Wpf.Converters;assembly=Start9.UI.Wpf"
            xmlns:ui="clr-namespace:Start9.UI.Wpf;assembly=Start9.UI.Wpf"
            xmlns:uib="clr-namespace:Start9.UI.Wpf.Behaviors;assembly=Start9.UI.Wpf"
            xmlns:e="http://schemas.microsoft.com/xaml/behaviors">
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    
    <Style x:Key="ToolbarBackgroundControlStyle" TargetType="{x:Type Control}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid>
                        <Border x:Name="ToolBarBorder" CornerRadius="8,8,0,0" BorderThickness="1,1,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource ToolbarBackgroundBrush}" BorderBrush="{DynamicResource ToolbarBorderBrush}">
                            <Border x:Name="ToolBarSecondaryBorder" CornerRadius="8,8,0,0"
                                                    BorderThickness="0,1,0,0" Background="{DynamicResource ToolbarSecondaryBackgroundBrush}"
                                                    BorderBrush="{DynamicResource ToolbarSecondaryBorderBrush}" />
                        </Border>
                        <Canvas Height="1" VerticalAlignment="Bottom" Margin="0" Background="{DynamicResource ToolbarBackgroundBrush}"/>
                        <Canvas Height="1" VerticalAlignment="Bottom" Margin="1" Background="{DynamicResource ToolbarTertiaryBackgroundBrush}"/>
                        <Canvas Height="1" VerticalAlignment="Bottom" Margin="2" Background="{DynamicResource ToolbarQuarternaryBackgroundBrush}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FooterBackgroundControlStyle" TargetType="{x:Type Control}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid>
                        <Border BorderBrush="{DynamicResource FooterOuterBorderBrush}"  BorderThickness="0,1,0,0">
                            <Border Background="{DynamicResource FooterBackgroundBrush}" BorderBrush="{DynamicResource FooterInnerBorderBrush}" BorderThickness="0,1,0,0"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource SeparatorVerticalBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Width="1" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
        <!--Setter Property="OverridesDefaultStyle" Value="True"/-->
        <Setter Property="Background" Value="{DynamicResource ToolbarBackgroundBrush}"/>
        <!--Setter Property="Background">
            <Setter.Value>
                <VisualBrush AutoLayoutContent="True">
                    <VisualBrush.Visual>
                        <Border Background="Red" MinWidth="50" MinHeight="50" BorderBrush="Green" BorderThickness="1" Width="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type VisualBrush}}}">
                            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Border BorderThickness="1,1,1,0" Background="{DynamicResource ToolbarBackgroundBrush}" BorderBrush="{DynamicResource ToolbarBorderBrush}">
                                    <Border BorderThickness="0,1,0,0" Background="{DynamicResource ToolbarSecondaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarSecondaryBorderBrush}" />
                                </Border>
                                <Canvas Height="1" VerticalAlignment="Bottom" Margin="0" Background="{DynamicResource ToolbarBackgroundBrush}"/>
                                <Canvas Height="1" VerticalAlignment="Bottom" Margin="1" Background="{DynamicResource ToolbarTertiaryBackgroundBrush}"/>
                                <Canvas Height="1" VerticalAlignment="Bottom" Margin="2" Background="{DynamicResource ToolbarQuarternaryBackgroundBrush}"/>
                            </Grid>
                        </Border>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Setter.Value>
        </Setter-->
        <!--Setter Property="Background">
            <Setter.Value>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Grid Width="200" Height="200"><!-Grid DataContext="{Binding RelativeSource={RelativeSource Mode=Self}}" MinWidth="50" MinHeight="50" Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToolBarTray}},FallbackValue=10}" Height="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToolBarTray}}, FallbackValue=10}" Background="#01000000"->
                            <Border BorderThickness="1,1,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource ToolbarBackgroundBrush}" BorderBrush="{DynamicResource ToolbarBorderBrush}">
                                <Border BorderThickness="0,1,0,0" Background="{DynamicResource ToolbarSecondaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarSecondaryBorderBrush}" />
                            </Border>
                            <Canvas Height="1" VerticalAlignment="Bottom" Margin="0" Background="{DynamicResource ToolbarBackgroundBrush}"/>
                            <Canvas Height="1" VerticalAlignment="Bottom" Margin="1" Background="{DynamicResource ToolbarTertiaryBackgroundBrush}"/>
                            <Canvas Height="1" VerticalAlignment="Bottom" Margin="2" Background="{DynamicResource ToolbarQuarternaryBackgroundBrush}"/>
                        </Grid>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Setter.Value>
        </Setter-->
    </Style>

    <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
        <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <ControlTemplate.Resources>
                        <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                                        <Border x:Name="Border" BorderThickness="1">
                                            <!--VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal" />
                                                    <VisualState x:Name="Pressed">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlMouseOverColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                                <VisualStateGroup x:Name="CheckStates">
                                                    <VisualState x:Name="Checked">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Unchecked" />
                                                    <VisualState x:Name="Indeterminate" />
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups-->
                                            <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <!--Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}" TargetType="{x:Type Button}" /-->
                        <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ToolbarButtonStyle}" TargetType="{x:Type Button}"/>

                        <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource ToolbarToggleButtonStyle}" TargetType="{x:Type ToggleButton}"/>

                        <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource {x:Type CheckBox}}" TargetType="{x:Type CheckBox}"/>
                        <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="{x:Type RadioButton}"/>

                        <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                            <Setter Property="Background" Value="{DynamicResource ToolbarDarkBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ToolbarBorderBrush}"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                        </Style>

                        <Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}"/>
                        </Style>

                        <Style x:Key="{x:Type ui:ToggleSwitch}" BasedOn="{StaticResource {x:Type ui:ToggleSwitch}}" TargetType="{x:Type ui:ToggleSwitch}">
                            <Setter Property="Background" Value="{DynamicResource ToolbarDarkBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ToolbarBorderBrush}"/>
                        </Style>

                        <!--Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
                            <Setter Property="SnapsToDevicePixels" Value="True" />
                            <Setter Property="OverridesDefaultStyle" Value="True" />
                            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="AllowDrop" Value="true" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TextBox}">
                                        <Border x:Name="Border" Padding="2" BorderThickness="1">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal" />
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledControlDarkColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderLightColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="ReadOnly" />
                                                    <VisualState x:Name="MouseOver" />
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style-->

                        <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
                            <Setter Property="Cursor" Value="SizeAll" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Grid Margin="4,0,0,0" Background="#01000000" SnapsToDevicePixels="True">
                                            <Separator HorizontalAlignment="Left"/>
                                            <Separator HorizontalAlignment="Right"/>
                                            <!--Rectangle Margin="0,2">
                                                <Rectangle.Fill>
                                                    <DrawingBrush Viewport="0,0,4,4" ViewportUnits="Absolute" Viewbox="0,0,8,8" ViewboxUnits="Absolute" TileMode="Tile">
                                                        <DrawingBrush.Drawing>
                                                            <DrawingGroup>
                                                                <GeometryDrawing Brush="#AAA" Geometry="M 4 4 L 4 8 L 8 8 L 8 4 z" />
                                                            </DrawingGroup>
                                                        </DrawingBrush.Drawing>
                                                    </DrawingBrush>
                                                </Rectangle.Fill>
                                            </Rectangle-->
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
                            <Setter Property="OverridesDefaultStyle" Value="true" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border x:Name="Border" CornerRadius="0,3,3,0" SnapsToDevicePixels="true">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#00000000" Offset="0" />
                                                    <GradientStop Offset="1" />
                                                </LinearGradientBrush>
                                            </Border.Background>
                                            <!--VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal" />
                                                    <VisualState x:Name="Pressed">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlMouseOverColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderLightColor}" />
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups-->
                                            <Grid>
                                                <Path x:Name="Arrow" Fill="Black" VerticalAlignment="Bottom" Margin="2,3" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" />
                                                <ContentPresenter />
                                            </Grid>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <DockPanel>
                            <ToggleButton DockPanel.Dock="Right" Visibility="{TemplateBinding HasOverflowItems, Converter={StaticResource BooleanToVisibilityConverter}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarOverflowButtonStyle}" ClickMode="Press" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom" StaysOpen="false" Focusable="false" PopupAnimation="Slide" IsOpen="{Binding IsOverflowOpen,  RelativeSource={RelativeSource TemplatedParent}}">
                                    <Border x:Name="DropDownBorder" BorderThickness="1">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200" Focusable="true" FocusVisualStyle="{x:Null}" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </Border>
                                </Popup>
                            </ToggleButton>
                            <Thumb x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbStyle}" Width="10" />
                            <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" />
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconPathStyle" TargetType="Path">
        <Setter Property="Stroke" Value="{DynamicResource IconPathStrokeBrush}"/>
        <Setter Property="StrokeThickness" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Fill" Value="{DynamicResource IconPathFillBrush}"/>
    </Style>
    
    <PathGeometry x:Key="SmallBackArrowPathIconGeometry" Figures="M 0 7 L 8 0 L 10 0 L 10 14 L 8 14 Z" x:Shared="False"/>
    <PathGeometry x:Key="LargeBackArrowPathIconGeometry" Figures="M 0 11 L 12 0 L 15 0 L 15 21 L 12 21 Z" x:Shared="False"/>
    <PathGeometry x:Key="SmallForwardArrowPathIconGeometry" Figures="M 10 7 L 2 0 L 0 0 L 0 14 L 2 14 Z" x:Shared="False"/>
    <PathGeometry x:Key="LargeForwardArrowPathIconGeometry" Figures="M 15 11 L 3 0 L 0 0 L 0 21 L 3 21 Z" x:Shared="False"/>

    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource TooltipForegroundBrush}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Name="Border" BorderThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{DynamicResource TooltipBackgroundBrush}" BorderBrush="{DynamicResource TooltipBorderBrush}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Left" VerticalAlignment="Top" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                            <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PlexFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderThickness="1" CornerRadius="2" SnapsToDevicePixels="true" BorderBrush="{DynamicResource FocusVisualBorderBrush}"
                            Background="Transparent" Margin="1">
                        <Border BorderThickness="2" CornerRadius="2" SnapsToDevicePixels="True" Background="Transparent" BorderBrush="{DynamicResource FocusVisualLinearGradientBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PlexRoundFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Ellipse StrokeThickness="1" SnapsToDevicePixels="true" Stroke="{DynamicResource FocusVisualBorderBrush}" Fill="Transparent" />
                        <Ellipse StrokeThickness="2" SnapsToDevicePixels="true" Fill="Transparent" Margin="1" Stroke="{DynamicResource FocusVisualLinearGradientBrush}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MessageBoxIconContentControlStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="50,0,-25,0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="MessageBoxBodyTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="50,50"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="MessageBoxButtonsListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <UniformGrid Rows="1" IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="5,5,0,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="{Binding (DockPanel.Dock), RelativeSource={RelativeSource Mode=TemplatedParent}}" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <ItemsPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Right" VerticalAlignment="Stretch"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                                    <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Visible" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                        <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Collapsed"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Button x:Name="Button" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding}" Margin="0,0,5,0" MinWidth="100">
                        <e:Interaction.Behaviors>
                            <uib:MessageBoxButtonBehavior/>
                        </e:Interaction.Behaviors>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ResourceDictionary.MergedDictionaries>
        <!--
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/.xaml"/>
        -->
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/ActionBox.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/BreadcrumbsBar.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/Button.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/CheckBox.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/ComboBox.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/CommandBar.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/DecoratableWindow.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/GroupBox.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/ListView.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/Menu.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/ProgressBar.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/ScrollBar.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/SpinBox.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/StatusBar.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/TabControl.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/TextBox.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/ToggleSwitch.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Plex;component/Themes/Controls/TreeView.xaml"/>
    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>